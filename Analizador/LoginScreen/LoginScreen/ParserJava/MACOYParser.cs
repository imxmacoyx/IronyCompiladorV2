//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/marco/Desktop/Interpretador MACOY/MACOY/MACOY\MACOY.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ParserJava {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MACOYParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INICIO=1, VAR=2, INT=3, IMPRIMIR=4, SI=5, SINO=6, SUMA=7, MENOS=8, MULT=9, 
		DIV=10, MOD=11, AND=12, OR=13, NOT=14, MAYORQUE=15, MENORQUE=16, MAYORIGUAL=17, 
		MENORIGUAL=18, IGUAL=19, DIFERENTE=20, ASIGNACION=21, LLAVE_ABRIR=22, 
		LLAVE_CERRAR=23, PARENTESIS_ABRIR=24, PARENTESIS_CERRAR=25, FINDELINEA=26, 
		BOOLEAN=27, VARIABLE=28, NUMERO=29, ESPACIOENBLANCO=30;
	public const int
		RULE_programa = 0, RULE_sentencia = 1, RULE_declaraciondevariable = 2, 
		RULE_asignaciondevariable = 3, RULE_imprimir = 4, RULE_condicional = 5, 
		RULE_expresion = 6, RULE_comparacion = 7, RULE_logicas = 8, RULE_operacion = 9, 
		RULE_operacionBinaria = 10, RULE_operacionComparacion = 11;
	public static readonly string[] ruleNames = {
		"programa", "sentencia", "declaraciondevariable", "asignaciondevariable", 
		"imprimir", "condicional", "expresion", "comparacion", "logicas", "operacion", 
		"operacionBinaria", "operacionComparacion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MACOY'", "'var'", "'int'", "'moutln'", "'Si'", "'Sino'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'>'", "'<'", "'>='", 
		"'<='", "'=='", "'!='", "'='", "'{'", "'}'", "'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INICIO", "VAR", "INT", "IMPRIMIR", "SI", "SINO", "SUMA", "MENOS", 
		"MULT", "DIV", "MOD", "AND", "OR", "NOT", "MAYORQUE", "MENORQUE", "MAYORIGUAL", 
		"MENORIGUAL", "IGUAL", "DIFERENTE", "ASIGNACION", "LLAVE_ABRIR", "LLAVE_CERRAR", 
		"PARENTESIS_ABRIR", "PARENTESIS_CERRAR", "FINDELINEA", "BOOLEAN", "VARIABLE", 
		"NUMERO", "ESPACIOENBLANCO"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MACOY.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MACOYParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MACOYParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MACOYParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		public ITerminalNode INICIO() { return GetToken(MACOYParser.INICIO, 0); }
		public ITerminalNode VARIABLE() { return GetToken(MACOYParser.VARIABLE, 0); }
		public ITerminalNode LLAVE_ABRIR() { return GetToken(MACOYParser.LLAVE_ABRIR, 0); }
		public ITerminalNode LLAVE_CERRAR() { return GetToken(MACOYParser.LLAVE_CERRAR, 0); }
		public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(INICIO);
			State = 25; Match(VARIABLE);
			State = 26; Match(LLAVE_ABRIR);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << IMPRIMIR) | (1L << SI) | (1L << VARIABLE) | (1L << NUMERO))) != 0)) {
				{
				{
				State = 27; sentencia();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33; Match(LLAVE_CERRAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public DeclaraciondevariableContext declaraciondevariable() {
			return GetRuleContext<DeclaraciondevariableContext>(0);
		}
		public AsignaciondevariableContext asignaciondevariable() {
			return GetRuleContext<AsignaciondevariableContext>(0);
		}
		public ImprimirContext imprimir() {
			return GetRuleContext<ImprimirContext>(0);
		}
		public CondicionalContext condicional() {
			return GetRuleContext<CondicionalContext>(0);
		}
		public OperacionBinariaContext operacionBinaria() {
			return GetRuleContext<OperacionBinariaContext>(0);
		}
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentencia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 2, RULE_sentencia);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; declaraciondevariable();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; asignaciondevariable();
				}
				break;
			case IMPRIMIR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37; imprimir();
				}
				break;
			case SI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 38; condicional();
				}
				break;
			case NUMERO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 39; operacionBinaria();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaraciondevariableContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(MACOYParser.VAR, 0); }
		public ITerminalNode VARIABLE() { return GetToken(MACOYParser.VARIABLE, 0); }
		public ITerminalNode FINDELINEA() { return GetToken(MACOYParser.FINDELINEA, 0); }
		public DeclaraciondevariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaraciondevariable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaraciondevariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaraciondevariableContext declaraciondevariable() {
		DeclaraciondevariableContext _localctx = new DeclaraciondevariableContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaraciondevariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(VAR);
			State = 43; Match(VARIABLE);
			State = 44; Match(FINDELINEA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignaciondevariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(MACOYParser.VARIABLE, 0); }
		public ITerminalNode ASIGNACION() { return GetToken(MACOYParser.ASIGNACION, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode FINDELINEA() { return GetToken(MACOYParser.FINDELINEA, 0); }
		public AsignaciondevariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignaciondevariable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignaciondevariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignaciondevariableContext asignaciondevariable() {
		AsignaciondevariableContext _localctx = new AsignaciondevariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_asignaciondevariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(VARIABLE);
			State = 47; Match(ASIGNACION);
			State = 48; expresion();
			State = 49; Match(FINDELINEA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImprimirContext : ParserRuleContext {
		public ITerminalNode IMPRIMIR() { return GetToken(MACOYParser.IMPRIMIR, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode FINDELINEA() { return GetToken(MACOYParser.FINDELINEA, 0); }
		public ImprimirContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imprimir; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImprimir(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImprimirContext imprimir() {
		ImprimirContext _localctx = new ImprimirContext(Context, State);
		EnterRule(_localctx, 8, RULE_imprimir);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(IMPRIMIR);
			State = 52; expresion();
			State = 53; Match(FINDELINEA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondicionalContext : ParserRuleContext {
		public ITerminalNode SI() { return GetToken(MACOYParser.SI, 0); }
		public ITerminalNode PARENTESIS_ABRIR() { return GetToken(MACOYParser.PARENTESIS_ABRIR, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode PARENTESIS_CERRAR() { return GetToken(MACOYParser.PARENTESIS_CERRAR, 0); }
		public ITerminalNode[] LLAVE_ABRIR() { return GetTokens(MACOYParser.LLAVE_ABRIR); }
		public ITerminalNode LLAVE_ABRIR(int i) {
			return GetToken(MACOYParser.LLAVE_ABRIR, i);
		}
		public ITerminalNode[] LLAVE_CERRAR() { return GetTokens(MACOYParser.LLAVE_CERRAR); }
		public ITerminalNode LLAVE_CERRAR(int i) {
			return GetToken(MACOYParser.LLAVE_CERRAR, i);
		}
		public ITerminalNode SINO() { return GetToken(MACOYParser.SINO, 0); }
		public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public CondicionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condicional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondicional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondicionalContext condicional() {
		CondicionalContext _localctx = new CondicionalContext(Context, State);
		EnterRule(_localctx, 10, RULE_condicional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(SI);
			State = 56; Match(PARENTESIS_ABRIR);
			State = 57; expresion();
			State = 58; Match(PARENTESIS_CERRAR);
			State = 59; Match(LLAVE_ABRIR);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << IMPRIMIR) | (1L << SI) | (1L << VARIABLE) | (1L << NUMERO))) != 0)) {
				{
				{
				State = 60; sentencia();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66; Match(LLAVE_CERRAR);
			State = 67; Match(SINO);
			State = 68; Match(LLAVE_ABRIR);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << IMPRIMIR) | (1L << SI) | (1L << VARIABLE) | (1L << NUMERO))) != 0)) {
				{
				{
				State = 69; sentencia();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75; Match(LLAVE_CERRAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ITerminalNode NUMERO() { return GetToken(MACOYParser.NUMERO, 0); }
		public ITerminalNode VARIABLE() { return GetToken(MACOYParser.VARIABLE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(MACOYParser.BOOLEAN, 0); }
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expresion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << VARIABLE) | (1L << NUMERO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparacionContext : ParserRuleContext {
		public ITerminalNode MAYORQUE() { return GetToken(MACOYParser.MAYORQUE, 0); }
		public ITerminalNode MENORQUE() { return GetToken(MACOYParser.MENORQUE, 0); }
		public ITerminalNode MAYORIGUAL() { return GetToken(MACOYParser.MAYORIGUAL, 0); }
		public ITerminalNode MENORIGUAL() { return GetToken(MACOYParser.MENORIGUAL, 0); }
		public ITerminalNode IGUAL() { return GetToken(MACOYParser.IGUAL, 0); }
		public ITerminalNode DIFERENTE() { return GetToken(MACOYParser.DIFERENTE, 0); }
		public ComparacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparacion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparacionContext comparacion() {
		ComparacionContext _localctx = new ComparacionContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAYORQUE) | (1L << MENORQUE) | (1L << MAYORIGUAL) | (1L << MENORIGUAL) | (1L << IGUAL) | (1L << DIFERENTE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicasContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(MACOYParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MACOYParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(MACOYParser.NOT, 0); }
		public LogicasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicas; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicasContext logicas() {
		LogicasContext _localctx = new LogicasContext(Context, State);
		EnterRule(_localctx, 16, RULE_logicas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << NOT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperacionContext : ParserRuleContext {
		public ITerminalNode SUMA() { return GetToken(MACOYParser.SUMA, 0); }
		public ITerminalNode MENOS() { return GetToken(MACOYParser.MENOS, 0); }
		public ITerminalNode MULT() { return GetToken(MACOYParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(MACOYParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(MACOYParser.MOD, 0); }
		public OperacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operacion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperacionContext operacion() {
		OperacionContext _localctx = new OperacionContext(Context, State);
		EnterRule(_localctx, 18, RULE_operacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SUMA) | (1L << MENOS) | (1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperacionBinariaContext : ParserRuleContext {
		public ITerminalNode[] NUMERO() { return GetTokens(MACOYParser.NUMERO); }
		public ITerminalNode NUMERO(int i) {
			return GetToken(MACOYParser.NUMERO, i);
		}
		public OperacionContext operacion() {
			return GetRuleContext<OperacionContext>(0);
		}
		public OperacionBinariaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operacionBinaria; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperacionBinaria(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperacionBinariaContext operacionBinaria() {
		OperacionBinariaContext _localctx = new OperacionBinariaContext(Context, State);
		EnterRule(_localctx, 20, RULE_operacionBinaria);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(NUMERO);
			State = 86; operacion();
			State = 87; Match(NUMERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperacionComparacionContext : ParserRuleContext {
		public ITerminalNode[] NUMERO() { return GetTokens(MACOYParser.NUMERO); }
		public ITerminalNode NUMERO(int i) {
			return GetToken(MACOYParser.NUMERO, i);
		}
		public ComparacionContext comparacion() {
			return GetRuleContext<ComparacionContext>(0);
		}
		public OperacionComparacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operacionComparacion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMACOYVisitor<TResult> typedVisitor = visitor as IMACOYVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperacionComparacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperacionComparacionContext operacionComparacion() {
		OperacionComparacionContext _localctx = new OperacionComparacionContext(Context, State);
		EnterRule(_localctx, 22, RULE_operacionComparacion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(NUMERO);
			State = 90; comparacion();
			State = 91; Match(NUMERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '`', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1F', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\"', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'+', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'@', '\n', '\a', '\f', '\a', '\xE', '\a', '\x43', '\v', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'I', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'L', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', 
		'\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x2', '\x6', '\x3', '\x2', '\x1D', '\x1F', '\x3', 
		'\x2', '\x11', '\x16', '\x3', '\x2', '\xE', '\x10', '\x3', '\x2', '\t', 
		'\r', '\x2', 'Z', '\x2', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', '*', 
		'\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'Q', '\x3', '\x2', '\x2', '\x2', '\x12', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x18', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\a', '\x3', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x1E', 
		'\x2', '\x2', '\x1C', ' ', '\a', '\x18', '\x2', '\x2', '\x1D', '\x1F', 
		'\x5', '\x4', '\x3', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x19', 
		'\x2', '\x2', '$', '\x3', '\x3', '\x2', '\x2', '\x2', '%', '+', '\x5', 
		'\x6', '\x4', '\x2', '&', '+', '\x5', '\b', '\x5', '\x2', '\'', '+', '\x5', 
		'\n', '\x6', '\x2', '(', '+', '\x5', '\f', '\a', '\x2', ')', '+', '\x5', 
		'\x16', '\f', '\x2', '*', '%', '\x3', '\x2', '\x2', '\x2', '*', '&', '\x3', 
		'\x2', '\x2', '\x2', '*', '\'', '\x3', '\x2', '\x2', '\x2', '*', '(', 
		'\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', 
		'\x5', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', 
		'-', '.', '\a', '\x1E', '\x2', '\x2', '.', '/', '\a', '\x1C', '\x2', '\x2', 
		'/', '\a', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x1E', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\x17', '\x2', '\x2', '\x32', '\x33', '\x5', 
		'\xE', '\b', '\x2', '\x33', '\x34', '\a', '\x1C', '\x2', '\x2', '\x34', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x6', '\x2', 
		'\x2', '\x36', '\x37', '\x5', '\xE', '\b', '\x2', '\x37', '\x38', '\a', 
		'\x1C', '\x2', '\x2', '\x38', '\v', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', '\a', '\x2', '\x2', ':', ';', '\a', '\x1A', '\x2', '\x2', ';', 
		'<', '\x5', '\xE', '\b', '\x2', '<', '=', '\a', '\x1B', '\x2', '\x2', 
		'=', '\x41', '\a', '\x18', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x19', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\b', '\x2', '\x2', '\x46', 'J', '\a', 
		'\x18', '\x2', '\x2', 'G', 'I', '\x5', '\x4', '\x3', '\x2', 'H', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '\x19', '\x2', '\x2', 'N', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\t', '\x2', '\x2', '\x2', 'P', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\t', '\x3', '\x2', '\x2', 'R', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\t', '\x4', '\x2', '\x2', 'T', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'V', '\t', '\x5', '\x2', '\x2', 'V', 
		'\x15', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x1F', '\x2', '\x2', 
		'X', 'Y', '\x5', '\x14', '\v', '\x2', 'Y', 'Z', '\a', '\x1F', '\x2', '\x2', 
		'Z', '\x17', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x1F', '\x2', 
		'\x2', '\\', ']', '\x5', '\x10', '\t', '\x2', ']', '^', '\a', '\x1F', 
		'\x2', '\x2', '^', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '*', 
		'\x41', 'J',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ParserJava
